{"ast":null,"code":"export default {\n  name: \"Identify\",\n  props: {\n    identifyCode: {\n      // 默认注册码\n      type: String,\n      default: \"1234\"\n    },\n    fontSizeMin: {\n      // 字体最小值\n      type: Number,\n      default: 25\n    },\n    fontSizeMax: {\n      // 字体最大值\n      type: Number,\n      default: 35\n    },\n    backgroundColorMin: {\n      // 验证码图片背景色最小值\n      type: Number,\n      default: 180\n    },\n    backgroundColorMax: {\n      // 验证码图片背景色最大值\n      type: Number,\n      default: 240\n    },\n    dotColorMin: {\n      // 背景干扰点最小值\n      type: Number,\n      default: 60\n    },\n    dotColorMax: {\n      // 背景干扰点最大值\n      type: Number,\n      default: 120\n    },\n    contentWidth: {\n      // 容器宽度\n      type: Number,\n      default: 90\n    },\n    contentHeight: {\n      // 容器高度\n      type: Number,\n      default: 38\n    }\n  },\n  methods: {\n    // 生成一个随机数\n    randomNum(min, max) {\n      return Math.floor(Math.random() * (max - min) + min);\n    },\n    // 生成一个随机的颜色\n    randomColor(min, max) {\n      let r = this.randomNum(min, max);\n      let g = this.randomNum(min, max);\n      let b = this.randomNum(min, max);\n      return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n    },\n    //画图\n    drawPic() {\n      let canvas = document.getElementById(\"s-canvas\");\n      //创建一个2D对象作为上下文。\n      let ctx = canvas.getContext(\"2d\");\n      ctx.textBaseline = \"bottom\";\n      // 绘制背景\n      ctx.fillStyle = \"#e6ecfd\";\n      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight);\n      // 绘制文字\n      for (let i = 0; i < this.identifyCode.length; i++) {\n        this.drawText(ctx, this.identifyCode[i], i);\n      }\n      this.drawLine(ctx);\n      this.drawDot(ctx);\n    },\n    //在画布上显示数据\n    drawText(ctx, txt, i) {\n      ctx.fillStyle = this.randomColor(50, 160); // 随机生成字体颜色\n      ctx.font = this.randomNum(this.fontSizeMin, this.fontSizeMax) + \"px SimHei\"; // 随机生成字体大小\n      let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1));\n      let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5);\n      var deg = this.randomNum(-30, 30);\n      // 修改坐标原点和旋转角度\n      ctx.translate(x, y);\n      ctx.rotate(deg * Math.PI / 180);\n      ctx.fillText(txt, 0, 0);\n      // 恢复坐标原点和旋转角度\n      ctx.rotate(-deg * Math.PI / 180);\n      ctx.translate(-x, -y);\n    },\n    // 绘制干扰线\n    drawLine(ctx) {\n      for (let i = 0; i < 4; i++) {\n        ctx.strokeStyle = this.randomColor(100, 200);\n        ctx.beginPath();\n        ctx.moveTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight));\n        ctx.lineTo(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight));\n        ctx.stroke();\n      }\n    },\n    // 绘制干扰点\n    drawDot(ctx) {\n      for (let i = 0; i < 30; i++) {\n        ctx.fillStyle = this.randomColor(0, 255);\n        ctx.beginPath();\n        ctx.arc(this.randomNum(0, this.contentWidth), this.randomNum(0, this.contentHeight), 1, 0, 2 * Math.PI);\n        ctx.fill();\n      }\n    }\n  },\n  watch: {\n    identifyCode() {\n      this.drawPic();\n    }\n  },\n  mounted() {\n    this.drawPic();\n  }\n};","map":{"version":3,"names":["name","props","identifyCode","type","String","default","fontSizeMin","Number","fontSizeMax","backgroundColorMin","backgroundColorMax","dotColorMin","dotColorMax","contentWidth","contentHeight","methods","randomNum","min","max","Math","floor","random","randomColor","r","g","b","drawPic","canvas","document","getElementById","ctx","getContext","textBaseline","fillStyle","fillRect","i","length","drawText","drawLine","drawDot","txt","font","x","y","deg","translate","rotate","PI","fillText","strokeStyle","beginPath","moveTo","lineTo","stroke","arc","fill","watch","mounted"],"sources":["src/components/identify.vue"],"sourcesContent":["<template>\r\n  <div class=\"s-canvas\">\r\n    <canvas\r\n        id=\"s-canvas\"\r\n        :width=\"contentWidth\"\r\n        :height=\"contentHeight\"\r\n    ></canvas>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"Identify\",\r\n  props: {\r\n    identifyCode: {\r\n      // 默认注册码\r\n      type: String,\r\n      default: \"1234\",\r\n    },\r\n    fontSizeMin: {\r\n      // 字体最小值\r\n      type: Number,\r\n      default: 25,\r\n    },\r\n    fontSizeMax: {\r\n      // 字体最大值\r\n      type: Number,\r\n      default: 35,\r\n    },\r\n    backgroundColorMin: {\r\n      // 验证码图片背景色最小值\r\n      type: Number,\r\n      default: 180,\r\n    },\r\n    backgroundColorMax: {\r\n      // 验证码图片背景色最大值\r\n      type: Number,\r\n      default: 240,\r\n    },\r\n    dotColorMin: {\r\n      // 背景干扰点最小值\r\n      type: Number,\r\n      default: 60,\r\n    },\r\n    dotColorMax: {\r\n      // 背景干扰点最大值\r\n      type: Number,\r\n      default: 120,\r\n    },\r\n    contentWidth: {\r\n      // 容器宽度\r\n      type: Number,\r\n      default: 90,\r\n    },\r\n    contentHeight: {\r\n      // 容器高度\r\n      type: Number,\r\n      default: 38,\r\n    },\r\n  },\r\n  methods: {\r\n    // 生成一个随机数\r\n    randomNum(min, max) {\r\n      return Math.floor(Math.random() * (max - min) + min);\r\n    },\r\n\r\n    // 生成一个随机的颜色\r\n    randomColor(min, max) {\r\n      let r = this.randomNum(min, max);\r\n      let g = this.randomNum(min, max);\r\n      let b = this.randomNum(min, max);\r\n      return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\r\n    },\r\n    //画图\r\n    drawPic() {\r\n      let canvas = document.getElementById(\"s-canvas\");\r\n      //创建一个2D对象作为上下文。\r\n      let ctx = canvas.getContext(\"2d\");\r\n      ctx.textBaseline = \"bottom\";\r\n      // 绘制背景\r\n      ctx.fillStyle = \"#e6ecfd\";\r\n      ctx.fillRect(0, 0, this.contentWidth, this.contentHeight);\r\n      // 绘制文字\r\n      for (let i = 0; i < this.identifyCode.length; i++) {\r\n        this.drawText(ctx, this.identifyCode[i], i);\r\n      }\r\n      this.drawLine(ctx);\r\n      this.drawDot(ctx);\r\n    },\r\n    //在画布上显示数据\r\n    drawText(ctx, txt, i) {\r\n      ctx.fillStyle = this.randomColor(50, 160); // 随机生成字体颜色\r\n      ctx.font =\r\n          this.randomNum(this.fontSizeMin, this.fontSizeMax) + \"px SimHei\"; // 随机生成字体大小\r\n      let x = (i + 1) * (this.contentWidth / (this.identifyCode.length + 1));\r\n      let y = this.randomNum(this.fontSizeMax, this.contentHeight - 5);\r\n      var deg = this.randomNum(-30, 30);\r\n      // 修改坐标原点和旋转角度\r\n      ctx.translate(x, y);\r\n      ctx.rotate((deg * Math.PI) / 180);\r\n      ctx.fillText(txt, 0, 0);\r\n      // 恢复坐标原点和旋转角度\r\n      ctx.rotate((-deg * Math.PI) / 180);\r\n      ctx.translate(-x, -y);\r\n    },\r\n\r\n    // 绘制干扰线\r\n    drawLine(ctx) {\r\n      for (let i = 0; i < 4; i++) {\r\n        ctx.strokeStyle = this.randomColor(100, 200);\r\n        ctx.beginPath();\r\n        ctx.moveTo(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight)\r\n        );\r\n        ctx.lineTo(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight)\r\n        );\r\n        ctx.stroke();\r\n      }\r\n    },\r\n\r\n    // 绘制干扰点\r\n    drawDot(ctx) {\r\n      for (let i = 0; i < 30; i++) {\r\n        ctx.fillStyle = this.randomColor(0, 255);\r\n        ctx.beginPath();\r\n        ctx.arc(\r\n            this.randomNum(0, this.contentWidth),\r\n            this.randomNum(0, this.contentHeight),\r\n            1,\r\n            0,\r\n            2 * Math.PI\r\n        );\r\n        ctx.fill();\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    identifyCode() {\r\n      this.drawPic();\r\n    },\r\n  },\r\n  mounted() {\r\n    this.drawPic();\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}